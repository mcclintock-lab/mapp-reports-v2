require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
module.exports = function(el) {
  var $el, $toggler, app, e, node, nodeid, toc, toggler, togglers, view, _i, _len, _ref;
  $el = $(el);
  app = window.app;
  toc = app.getToc();
  if (!toc) {
    console.log('No table of contents found');
    return;
  }
  togglers = $el.find('a[data-toggle-node]');
  _ref = togglers.toArray();
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    toggler = _ref[_i];
    $toggler = $(toggler);
    nodeid = $toggler.data('toggle-node');
    try {
      view = toc.getChildViewById(nodeid);
      node = view.model;
      $toggler.attr('data-visible', !!node.get('visible'));
      $toggler.data('tocItem', view);
    } catch (_error) {
      e = _error;
      $toggler.attr('data-not-found', 'true');
    }
  }
  return togglers.on('click', function(e) {
    e.preventDefault();
    $el = $(e.target);
    view = $el.data('tocItem');
    if (view) {
      view.toggleVisibility(e);
      return $el.attr('data-visible', !!view.model.get('visible'));
    } else {
      return alert("Layer not found in the current Table of Contents. \nExpected nodeid " + ($el.data('toggle-node')));
    }
  });
};


},{}],3:[function(require,module,exports){
var JobItem,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

JobItem = (function(_super) {
  __extends(JobItem, _super);

  JobItem.prototype.className = 'reportResult';

  JobItem.prototype.events = {};

  JobItem.prototype.bindings = {
    "h6 a": {
      observe: "serviceName",
      updateView: true,
      attributes: [
        {
          name: 'href',
          observe: 'serviceUrl'
        }
      ]
    },
    ".startedAt": {
      observe: ["startedAt", "status"],
      visible: function() {
        var _ref;
        return (_ref = this.model.get('status')) !== 'complete' && _ref !== 'error';
      },
      updateView: true,
      onGet: function() {
        if (this.model.get('startedAt')) {
          return "Started " + moment(this.model.get('startedAt')).fromNow() + ". ";
        } else {
          return "";
        }
      }
    },
    ".status": {
      observe: "status",
      onGet: function(s) {
        switch (s) {
          case 'pending':
            return "waiting in line";
          case 'running':
            return "running analytical service";
          case 'complete':
            return "completed";
          case 'error':
            return "an error occurred";
          default:
            return s;
        }
      }
    },
    ".queueLength": {
      observe: "queueLength",
      onGet: function(v) {
        var s;
        s = "Waiting behind " + v + " job";
        if (v.length > 1) {
          s += 's';
        }
        return s + ". ";
      },
      visible: function(v) {
        return (v != null) && parseInt(v) > 0;
      }
    },
    ".errors": {
      observe: 'error',
      updateView: true,
      visible: function(v) {
        return (v != null ? v.length : void 0) > 2;
      },
      onGet: function(v) {
        if (v != null) {
          return JSON.stringify(v, null, '  ');
        } else {
          return null;
        }
      }
    }
  };

  function JobItem(model) {
    this.model = model;
    JobItem.__super__.constructor.call(this);
  }

  JobItem.prototype.render = function() {
    this.$el.html("<h6><a href=\"#\" target=\"_blank\"></a><span class=\"status\"></span></h6>\n<div>\n  <span class=\"startedAt\"></span>\n  <span class=\"queueLength\"></span>\n  <pre class=\"errors\"></pre>\n</div>");
    return this.stickit();
  };

  return JobItem;

})(Backbone.View);

module.exports = JobItem;


},{}],4:[function(require,module,exports){
var ReportResults,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ReportResults = (function(_super) {
  __extends(ReportResults, _super);

  ReportResults.prototype.defaultPollingInterval = 3000;

  function ReportResults(sketch, deps) {
    var url;
    this.sketch = sketch;
    this.deps = deps;
    this.poll = __bind(this.poll, this);
    this.url = url = "/reports/" + this.sketch.id + "/" + (this.deps.join(','));
    ReportResults.__super__.constructor.call(this);
  }

  ReportResults.prototype.poll = function() {
    var _this = this;
    return this.fetch({
      success: function() {
        var payloadSize, problem, result, _i, _len, _ref, _ref1;
        _this.trigger('jobs');
        _ref = _this.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          result = _ref[_i];
          if ((_ref1 = result.get('status')) !== 'complete' && _ref1 !== 'error') {
            if (!_this.interval) {
              _this.interval = setInterval(_this.poll, _this.defaultPollingInterval);
            }
            return;
          }
          console.log(_this.models[0].get('payloadSizeBytes'));
          payloadSize = Math.round(((_this.models[0].get('payloadSizeBytes') || 0) / 1024) * 100) / 100;
          console.log("FeatureSet sent to GP weighed in at " + payloadSize + "kb");
        }
        if (_this.interval) {
          window.clearInterval(_this.interval);
        }
        if (problem = _.find(_this.models, function(r) {
          return r.get('error') != null;
        })) {
          return _this.trigger('error', "Problem with " + (problem.get('serviceName')) + " job");
        } else {
          return _this.trigger('finished');
        }
      },
      error: function(e, res, a, b) {
        var json, _ref, _ref1;
        if (res.status !== 0) {
          if ((_ref = res.responseText) != null ? _ref.length : void 0) {
            try {
              json = JSON.parse(res.responseText);
            } catch (_error) {

            }
          }
          if (_this.interval) {
            window.clearInterval(_this.interval);
          }
          return _this.trigger('error', (json != null ? (_ref1 = json.error) != null ? _ref1.message : void 0 : void 0) || 'Problem contacting the SeaSketch server');
        }
      }
    });
  };

  return ReportResults;

})(Backbone.Collection);

module.exports = ReportResults;


},{}],"reportTab":[function(require,module,exports){
module.exports=require('a21iR2');
},{}],"a21iR2":[function(require,module,exports){
var CollectionView, JobItem, RecordSet, ReportResults, ReportTab, enableLayerTogglers, round, t, templates, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

enableLayerTogglers = require('./enableLayerTogglers.coffee');

round = require('./utils.coffee').round;

ReportResults = require('./reportResults.coffee');

t = require('../templates/templates.js');

templates = {
  reportLoading: t['node_modules/seasketch-reporting-api/reportLoading']
};

JobItem = require('./jobItem.coffee');

CollectionView = require('views/collectionView');

RecordSet = (function() {
  function RecordSet(data, tab, sketchClassId) {
    this.data = data;
    this.tab = tab;
    this.sketchClassId = sketchClassId;
  }

  RecordSet.prototype.toArray = function() {
    var data,
      _this = this;
    if (this.sketchClassId) {
      data = _.find(this.data.value, function(v) {
        var _ref, _ref1, _ref2;
        return ((_ref = v.features) != null ? (_ref1 = _ref[0]) != null ? (_ref2 = _ref1.attributes) != null ? _ref2['SC_ID'] : void 0 : void 0 : void 0) === _this.sketchClassId;
      });
      if (!data) {
        throw "Could not find data for sketchClass " + this.sketchClassId;
      }
    } else {
      if (_.isArray(this.data.value)) {
        data = this.data.value[0];
      } else {
        data = this.data.value;
      }
    }
    return _.map(data.features, function(feature) {
      return feature.attributes;
    });
  };

  RecordSet.prototype.raw = function(attr) {
    var attrs;
    attrs = _.map(this.toArray(), function(row) {
      return row[attr];
    });
    attrs = _.filter(attrs, function(attr) {
      return attr !== void 0;
    });
    if (attrs.length === 0) {
      console.log(this.data);
      this.tab.reportError("Could not get attribute " + attr + " from results");
      throw "Could not get attribute " + attr;
    } else if (attrs.length === 1) {
      return attrs[0];
    } else {
      return attrs;
    }
  };

  RecordSet.prototype.int = function(attr) {
    var raw;
    raw = this.raw(attr);
    if (_.isArray(raw)) {
      return _.map(raw, parseInt);
    } else {
      return parseInt(raw);
    }
  };

  RecordSet.prototype.float = function(attr, decimalPlaces) {
    var raw;
    if (decimalPlaces == null) {
      decimalPlaces = 2;
    }
    raw = this.raw(attr);
    if (_.isArray(raw)) {
      return _.map(raw, function(val) {
        return round(val, decimalPlaces);
      });
    } else {
      return round(raw, decimalPlaces);
    }
  };

  RecordSet.prototype.bool = function(attr) {
    var raw;
    raw = this.raw(attr);
    if (_.isArray(raw)) {
      return _.map(raw, function(val) {
        return val.toString().toLowerCase() === 'true';
      });
    } else {
      return raw.toString().toLowerCase() === 'true';
    }
  };

  return RecordSet;

})();

ReportTab = (function(_super) {
  __extends(ReportTab, _super);

  function ReportTab() {
    this.renderJobDetails = __bind(this.renderJobDetails, this);
    this.startEtaCountdown = __bind(this.startEtaCountdown, this);
    this.reportJobs = __bind(this.reportJobs, this);
    this.showError = __bind(this.showError, this);
    this.reportError = __bind(this.reportError, this);
    this.reportRequested = __bind(this.reportRequested, this);
    this.remove = __bind(this.remove, this);
    _ref = ReportTab.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ReportTab.prototype.name = 'Information';

  ReportTab.prototype.dependencies = [];

  ReportTab.prototype.initialize = function(model, options) {
    this.model = model;
    this.options = options;
    this.app = window.app;
    _.extend(this, this.options);
    this.reportResults = new ReportResults(this.model, this.dependencies);
    this.listenToOnce(this.reportResults, 'error', this.reportError);
    this.listenToOnce(this.reportResults, 'jobs', this.renderJobDetails);
    this.listenToOnce(this.reportResults, 'jobs', this.reportJobs);
    this.listenTo(this.reportResults, 'finished', _.bind(this.render, this));
    return this.listenToOnce(this.reportResults, 'request', this.reportRequested);
  };

  ReportTab.prototype.render = function() {
    throw 'render method must be overidden';
  };

  ReportTab.prototype.show = function() {
    var _ref1, _ref2;
    this.$el.show();
    this.visible = true;
    if (((_ref1 = this.dependencies) != null ? _ref1.length : void 0) && !this.reportResults.models.length) {
      return this.reportResults.poll();
    } else if (!((_ref2 = this.dependencies) != null ? _ref2.length : void 0)) {
      this.render();
      return this.$('[data-attribute-type=UrlField] .value, [data-attribute-type=UploadField] .value').each(function() {
        var html, name, text, url, _i, _len, _ref3;
        text = $(this).text();
        html = [];
        _ref3 = text.split(',');
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          url = _ref3[_i];
          if (url.length) {
            name = _.last(url.split('/'));
            html.push("<a target=\"_blank\" href=\"" + url + "\">" + name + "</a>");
          }
        }
        return $(this).html(html.join(', '));
      });
    }
  };

  ReportTab.prototype.hide = function() {
    this.$el.hide();
    return this.visible = false;
  };

  ReportTab.prototype.remove = function() {
    window.clearInterval(this.etaInterval);
    this.stopListening();
    return ReportTab.__super__.remove.call(this);
  };

  ReportTab.prototype.reportRequested = function() {
    return this.$el.html(templates.reportLoading.render({}));
  };

  ReportTab.prototype.reportError = function(msg, cancelledRequest) {
    if (!cancelledRequest) {
      if (msg === 'JOB_ERROR') {
        return this.showError('Error with specific job');
      } else {
        return this.showError(msg);
      }
    }
  };

  ReportTab.prototype.showError = function(msg) {
    this.$('.progress').remove();
    this.$('p.error').remove();
    return this.$('h4').text("An Error Occurred").after("<p class=\"error\" style=\"text-align:center;\">" + msg + "</p>");
  };

  ReportTab.prototype.reportJobs = function() {
    if (!this.maxEta) {
      this.$('.progress .bar').width('100%');
    }
    return this.$('h4').text("Analyzing Designs");
  };

  ReportTab.prototype.startEtaCountdown = function() {
    var _this = this;
    if (this.maxEta) {
      _.delay(function() {
        return _this.reportResults.poll();
      }, (this.maxEta + 1) * 1000);
      return _.delay(function() {
        _this.$('.progress .bar').css('transition-timing-function', 'linear');
        _this.$('.progress .bar').css('transition-duration', "" + (_this.maxEta + 1) + "s");
        return _this.$('.progress .bar').width('100%');
      }, 500);
    }
  };

  ReportTab.prototype.renderJobDetails = function() {
    var item, job, maxEta, _i, _j, _len, _len1, _ref1, _ref2, _results,
      _this = this;
    maxEta = null;
    _ref1 = this.reportResults.models;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      job = _ref1[_i];
      if (job.get('etaSeconds')) {
        if (!maxEta || job.get('etaSeconds') > maxEta) {
          maxEta = job.get('etaSeconds');
        }
      }
    }
    if (maxEta) {
      this.maxEta = maxEta;
      this.$('.progress .bar').width('5%');
      this.startEtaCountdown();
    }
    this.$('[rel=details]').css('display', 'block');
    this.$('[rel=details]').click(function(e) {
      e.preventDefault();
      _this.$('[rel=details]').hide();
      return _this.$('.details').show();
    });
    _ref2 = this.reportResults.models;
    _results = [];
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      job = _ref2[_j];
      item = new JobItem(job);
      item.render();
      _results.push(this.$('.details').append(item.el));
    }
    return _results;
  };

  ReportTab.prototype.getResult = function(id) {
    var result, results;
    results = this.getResults();
    result = _.find(results, function(r) {
      return r.paramName === id;
    });
    if (result == null) {
      throw new Error('No result with id ' + id);
    }
    return result.value;
  };

  ReportTab.prototype.getFirstResult = function(param, id) {
    var e, result;
    result = this.getResult(param);
    try {
      return result[0].features[0].attributes[id];
    } catch (_error) {
      e = _error;
      throw "Error finding " + param + ":" + id + " in gp results";
    }
  };

  ReportTab.prototype.getResults = function() {
    var results;
    results = this.reportResults.map(function(result) {
      return result.get('result').results;
    });
    if (!(results != null ? results.length : void 0)) {
      throw new Error('No gp results');
    }
    return _.filter(results, function(result) {
      var _ref1;
      return (_ref1 = result.paramName) !== 'ResultCode' && _ref1 !== 'ResultMsg';
    });
  };

  ReportTab.prototype.recordSet = function(dependency, paramName, sketchClassId) {
    var dep, param;
    if (sketchClassId == null) {
      sketchClassId = false;
    }
    if (__indexOf.call(this.dependencies, dependency) < 0) {
      throw new Error("Unknown dependency " + dependency);
    }
    dep = this.reportResults.find(function(r) {
      return r.get('serviceName') === dependency;
    });
    if (!dep) {
      console.log(this.reportResults.models);
      throw new Error("Could not find results for " + dependency + ".");
    }
    param = _.find(dep.get('result').results, function(param) {
      return param.paramName === paramName;
    });
    if (!param) {
      console.log(dep.get('data').results);
      throw new Error("Could not find param " + paramName + " in " + dependency);
    }
    return new RecordSet(param, this, sketchClassId);
  };

  ReportTab.prototype.enableTablePaging = function() {
    return this.$('[data-paging]').each(function() {
      var $table, i, noRowsMessage, pageSize, pages, parent, rows, ul, _i, _len, _ref1;
      $table = $(this);
      pageSize = $table.data('paging');
      rows = $table.find('tbody tr').length;
      pages = Math.ceil(rows / pageSize);
      if (pages > 1) {
        $table.append("<tfoot>\n  <tr>\n    <td colspan=\"" + ($table.find('thead th').length) + "\">\n      <div class=\"pagination\">\n        <ul>\n          <li><a href=\"#\">Prev</a></li>\n        </ul>\n      </div>\n    </td>\n  </tr>\n</tfoot>");
        ul = $table.find('tfoot ul');
        _ref1 = _.range(1, pages + 1);
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          i = _ref1[_i];
          ul.append("<li><a href=\"#\">" + i + "</a></li>");
        }
        ul.append("<li><a href=\"#\">Next</a></li>");
        $table.find('li a').click(function(e) {
          var $a, a, n, offset, text;
          e.preventDefault();
          $a = $(this);
          text = $a.text();
          if (text === 'Next') {
            a = $a.parent().parent().find('.active').next().find('a');
            if (a.text() !== 'Next') {
              return a.click();
            }
          } else if (text === 'Prev') {
            a = $a.parent().parent().find('.active').prev().find('a');
            if (a.text() !== 'Prev') {
              return a.click();
            }
          } else {
            $a.parent().parent().find('.active').removeClass('active');
            $a.parent().addClass('active');
            n = parseInt(text);
            $table.find('tbody tr').hide();
            offset = pageSize * (n - 1);
            return $table.find("tbody tr").slice(offset, n * pageSize).show();
          }
        });
        $($table.find('li a')[1]).click();
      }
      if (noRowsMessage = $table.data('no-rows')) {
        if (rows === 0) {
          parent = $table.parent();
          $table.remove();
          parent.removeClass('tableContainer');
          return parent.append("<p>" + noRowsMessage + "</p>");
        }
      }
    });
  };

  ReportTab.prototype.enableLayerTogglers = function() {
    return enableLayerTogglers(this.$el);
  };

  ReportTab.prototype.getChildren = function(sketchClassId) {
    return _.filter(this.children, function(child) {
      return child.getSketchClass().id === sketchClassId;
    });
  };

  return ReportTab;

})(Backbone.View);

module.exports = ReportTab;


},{"../templates/templates.js":"CNqB+b","./enableLayerTogglers.coffee":2,"./jobItem.coffee":3,"./reportResults.coffee":4,"./utils.coffee":"+VosKh","views/collectionView":1}],"api/utils":[function(require,module,exports){
module.exports=require('+VosKh');
},{}],"+VosKh":[function(require,module,exports){
module.exports = {
  round: function(number, decimalPlaces) {
    var multiplier;
    if (!_.isNumber(number)) {
      number = parseFloat(number);
    }
    multiplier = Math.pow(10, decimalPlaces);
    return Math.round(number * multiplier) / multiplier;
  }
};


},{}],"CNqB+b":[function(require,module,exports){
this["Templates"] = this["Templates"] || {};
this["Templates"]["node_modules/seasketch-reporting-api/attributes/attributeItem"] = new Hogan.Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<tr data-attribute-id=\"");_.b(_.v(_.f("id",c,p,0)));_.b("\" data-attribute-exportid=\"");_.b(_.v(_.f("exportid",c,p,0)));_.b("\" data-attribute-type=\"");_.b(_.v(_.f("type",c,p,0)));_.b("\">");_.b("\n" + i);_.b("  <td class=\"name\">");_.b(_.v(_.f("name",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("  <td class=\"value\">");_.b(_.v(_.f("formattedValue",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("</tr>");_.b("\n");return _.fl();;});
this["Templates"]["node_modules/seasketch-reporting-api/attributes/attributesTable"] = new Hogan.Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<table class=\"attributes\">");_.b("\n" + i);if(_.s(_.f("attributes",c,p,1),c,p,0,44,123,"{{ }}")){_.rs(c,p,function(c,p,_){if(!_.s(_.f("doNotExport",c,p,1),c,p,1,0,0,"")){_.b(_.rp("attributes/attributeItem",c,p,"    "));};});c.pop();}_.b("</table>");_.b("\n");return _.fl();;});
this["Templates"]["node_modules/seasketch-reporting-api/genericAttributes"] = new Hogan.Template(function(c,p,i){var _=this;_.b(i=i||"");if(_.s(_.d("sketchClass.deleted",c,p,1),c,p,0,24,270,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("<div class=\"alert alert-warn\" style=\"margin-bottom:10px;\">");_.b("\n" + i);_.b("  This sketch was created using the \"");_.b(_.v(_.d("sketchClass.name",c,p,0)));_.b("\" template, which is");_.b("\n" + i);_.b("  no longer available. You will not be able to copy this sketch or make new");_.b("\n" + i);_.b("  sketches of this type.");_.b("\n" + i);_.b("</div>");_.b("\n");});c.pop();}_.b("<div class=\"reportSection\">");_.b("\n" + i);_.b("  <h4>");_.b(_.v(_.d("sketchClass.name",c,p,0)));_.b(" Attributes</h4>");_.b("\n" + i);_.b(_.rp("attributes/attributesTable",c,p,"    "));_.b("  </table>");_.b("\n" + i);_.b("</div>");_.b("\n");return _.fl();;});
this["Templates"]["node_modules/seasketch-reporting-api/reportLoading"] = new Hogan.Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"reportLoading\">");_.b("\n" + i);_.b("  <!-- <div class=\"spinner\">3</div> -->");_.b("\n" + i);_.b("  <h4>Requesting Report from Server</h4>");_.b("\n" + i);_.b("  <div class=\"progress progress-striped active\">");_.b("\n" + i);_.b("    <div class=\"bar\" style=\"width: 100%;\"></div>");_.b("\n" + i);_.b("  </div>");_.b("\n" + i);_.b("  <a href=\"#\" rel=\"details\">details</a>");_.b("\n" + i);_.b("    <div class=\"details\">");_.b("\n" + i);_.b("  </div>");_.b("\n" + i);_.b("\n" + i);_.b("</div>");_.b("\n");return _.fl();;});

if(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
  module.exports = this["Templates"];
}
},{}],"api/templates":[function(require,module,exports){
module.exports=require('CNqB+b');
},{}],11:[function(require,module,exports){
var ArrayCultureTab, ReportTab, templates, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ReportTab = require('reportTab');

templates = require('../templates/templates.js');

ArrayCultureTab = (function(_super) {
  __extends(ArrayCultureTab, _super);

  function ArrayCultureTab() {
    _ref = ArrayCultureTab.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ArrayCultureTab.prototype.name = 'Governance';

  ArrayCultureTab.prototype.className = 'culture';

  ArrayCultureTab.prototype.template = templates.arrayCulture;

  ArrayCultureTab.prototype.dependencies = ["ExistingMarineProtectedAreas", "FisheriesClosures", "OverlapWithExistingProvincialTenures"];

  ArrayCultureTab.prototype.timeout = 600000;

  ArrayCultureTab.prototype.render = function() {
    var attr, child, closures, context, existingMPAs, hasClosures, hasOverlapWithExistingMPAs, hasPMZs, hasProvincialTenures, hasSMZs, provincial, _i, _j, _len, _len1, _ref1, _ref2, _ref3;
    hasPMZs = false;
    hasSMZs = false;
    _ref1 = this.children;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      child = _ref1[_i];
      _ref2 = child.getAttributes();
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        attr = _ref2[_j];
        if (attr.exportid === 'ZONE_TYPE') {
          if (attr.value === 'pmz') {
            hasPMZs = true;
          } else if (attr.value === 'smz') {
            hasSMZs = true;
          }
        }
      }
    }
    provincial = this.recordSet("OverlapWithExistingProvincialTenures", "ProvincialTenures").toArray();
    existingMPAs = this.recordSet('ExistingMarineProtectedAreas', "ExistingMarineProtectedAreas").toArray();
    hasProvincialTenures = (provincial != null ? provincial.length : void 0) > 0;
    hasOverlapWithExistingMPAs = (existingMPAs != null ? existingMPAs.length : void 0) > 0;
    closures = this.recordSet("FisheriesClosures", "FisheriesClosures").toArray();
    hasClosures = (closures != null ? closures.length : void 0) > 0;
    context = {
      sketch: this.model.forTemplate(),
      sketchClass: this.sketchClass.forTemplate(),
      attributes: this.model.getAttributes(),
      admin: this.project.isAdmin(window.user),
      array: ((_ref3 = this.children) != null ? _ref3.length : void 0) > 0,
      hasPMZs: hasPMZs,
      hasSMZs: hasSMZs,
      closures: closures,
      hasClosures: hasClosures,
      provincial: provincial,
      hasProvincialTenures: hasProvincialTenures,
      existingMPAs: existingMPAs,
      hasOverlapWithExistingMPAs: hasOverlapWithExistingMPAs
    };
    this.$el.html(this.template.render(context, templates));
    this.enableLayerTogglers();
    return this.enableTablePaging();
  };

  return ArrayCultureTab;

})(ReportTab);

module.exports = ArrayCultureTab;


},{"../templates/templates.js":16,"reportTab":"a21iR2"}],12:[function(require,module,exports){
var ArrayEconomicTab, ReportTab, templates, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ReportTab = require('reportTab');

templates = require('../templates/templates.js');

ArrayEconomicTab = (function(_super) {
  __extends(ArrayEconomicTab, _super);

  function ArrayEconomicTab() {
    this.roundEffortData = __bind(this.roundEffortData, this);
    _ref = ArrayEconomicTab.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ArrayEconomicTab.prototype.name = 'Human Well-Being';

  ArrayEconomicTab.prototype.className = 'economic';

  ArrayEconomicTab.prototype.template = templates.arrayEconomic;

  ArrayEconomicTab.prototype.dependencies = ['OverlapWithFisheriesValues', 'InvestRecreationValue', 'FisheriesEffort'];

  ArrayEconomicTab.prototype.timeout = 600000;

  ArrayEconomicTab.prototype.render = function() {
    var context, error, fe_catch, fe_effort, fisheries, hasInvestRecValues, investAvgRecValue, showFisheriesEffort;
    fisheries = this.recordSet("OverlapWithFisheriesValues", "FisheriesValues").toArray();
    try {
      investAvgRecValue = this.recordSet("InvestRecreationValue", "InvestRecreationValue").float('AVG_REC');
      hasInvestRecValues = true;
    } catch (_error) {
      error = _error;
      hasInvestRecValues = false;
    }
    fe_catch = this.recordSet("FisheriesEffort", "Catch").toArray();
    console.log("fe catch::: ", fe_catch);
    this.roundEffortData(fe_catch);
    fe_effort = this.recordSet("FisheriesEffort", "Effort").toArray();
    this.roundEffortData(fe_effort);
    showFisheriesEffort = true;
    context = {
      sketch: this.model.forTemplate(),
      sketchClass: this.sketchClass.forTemplate(),
      attributes: this.model.getAttributes(),
      admin: this.project.isAdmin(window.user),
      array: true,
      fisheries: fisheries,
      hasInvestRecValues: hasInvestRecValues,
      investAvgRecValue: investAvgRecValue,
      fe_catch: fe_catch,
      fe_effort: fe_effort,
      showFisheriesEffort: showFisheriesEffort
    };
    this.$el.html(this.template.render(context, templates));
    this.enableLayerTogglers();
    return this.enableTablePaging();
  };

  ArrayEconomicTab.prototype.roundEffortData = function(rec_set) {
    var high_total, low_total, rs, _i, _len, _results;
    low_total = 0.0;
    high_total = 0.0;
    _results = [];
    for (_i = 0, _len = rec_set.length; _i < _len; _i++) {
      rs = rec_set[_i];
      rs.TOT = Number(rs.TOT).toFixed(1);
      rs.SUB_TOT = Number(rs.SUB_TOT).toFixed(1);
      rs.REG_TOT = Number(rs.REG_TOT).toFixed(1);
      _results.push(rs.CST_TOT = Number(rs.CST_TOT).toFixed(1));
    }
    return _results;
  };

  return ArrayEconomicTab;

})(ReportTab);

module.exports = ArrayEconomicTab;


},{"../templates/templates.js":16,"reportTab":"a21iR2"}],13:[function(require,module,exports){
var ArrayEnvironmentTab, ReportTab, templates, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ReportTab = require('reportTab');

templates = require('../templates/templates.js');

ArrayEnvironmentTab = (function(_super) {
  __extends(ArrayEnvironmentTab, _super);

  function ArrayEnvironmentTab() {
    this.renderMarxanAnalysis = __bind(this.renderMarxanAnalysis, this);
    _ref = ArrayEnvironmentTab.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ArrayEnvironmentTab.prototype.name = 'Ecological Integrity';

  ArrayEnvironmentTab.prototype.className = 'environment';

  ArrayEnvironmentTab.prototype.template = templates.arrayEnvironment;

  ArrayEnvironmentTab.prototype.dependencies = ['OverlapWithImportantAreas', 'OverlapWithBiogenicAndCommunityFormingSpecies', 'OverlapWithNonFishBreedingAreas', 'OverlapWithMarineClassifications', 'MarxanAnalysis'];

  ArrayEnvironmentTab.prototype.timeout = 600000;

  ArrayEnvironmentTab.prototype.render = function() {
    var attr, benthicClasses, child, context, criticalHabitat, error, hasBenthicClasses, hasCriticalHabitat, hasHighTideAreas, hasImportantAreas, hasMarineBirds, hasMarineEcosections, hasOceanographicRegions, hasPMZs, hasSMZs, highTideAreas, importantAreas, marineBirds, marineEcosections, oceanographicRegions, _i, _j, _len, _len1, _ref1, _ref2,
      _this = this;
    hasPMZs = false;
    hasSMZs = false;
    _ref1 = this.children;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      child = _ref1[_i];
      _ref2 = child.getAttributes();
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        attr = _ref2[_j];
        if (attr.exportid === 'ZONE_TYPE') {
          if (attr.value === 'pmz') {
            hasPMZs = true;
          } else if (attr.value === 'smz') {
            hasSMZs = true;
          }
        }
      }
    }
    try {
      importantAreas = this.recordSet("OverlapWithImportantAreas", "ImportantAreas").toArray();
      hasImportantAreas = (importantAreas != null ? importantAreas.length : void 0) > 0;
    } catch (_error) {
      error = _error;
      hasImportantAreas = false;
    }
    try {
      criticalHabitat = this.recordSet("OverlapWithImportantAreas", "CriticalHabitat").toArray();
      hasCriticalHabitat = (criticalHabitat != null ? criticalHabitat.length : void 0) > 0;
    } catch (_error) {
      error = _error;
      hasCriticalHabitat = false;
    }
    try {
      marineBirds = this.recordSet("OverlapWithImportantAreas", "MarineBirds").toArray();
      hasMarineBirds = (marineBirds != null ? marineBirds.length : void 0) > 0;
    } catch (_error) {}
    try {
      marineEcosections = this.recordSet('OverlapWithMarineClassifications', 'Ecoregions').toArray();
      hasMarineEcosections = (marineEcosections != null ? marineEcosections.length : void 0) > 0;
    } catch (_error) {
      error = _error;
      hasMarineEcosections = false;
    }
    try {
      oceanographicRegions = this.recordSet('OverlapWithMarineClassifications', 'OceanographicAreas').toArray();
      hasOceanographicRegions = (oceanographicRegions != null ? oceanographicRegions.length : void 0) > 0;
    } catch (_error) {
      error = _error;
      hasOceanographicRegions = false;
    }
    try {
      benthicClasses = this.recordSet('OverlapWithMarineClassifications', 'BenthicClasses').toArray();
      hasBenthicClasses = (benthicClasses != null ? benthicClasses.length : void 0) > 0;
    } catch (_error) {
      error = _error;
      hasBenthicClasses = false;
    }
    try {
      highTideAreas = this.recordSet('OverlapWithMarineClassifications', 'TidalAreas').toArray();
      hasHighTideAreas = (highTideAreas != null ? highTideAreas.length : void 0) > 0;
    } catch (_error) {
      error = _error;
      hasHighTideAreas = false;
    }
    context = {
      sketch: this.model.forTemplate(),
      sketchClass: this.sketchClass.forTemplate(),
      attributes: this.model.getAttributes(),
      admin: this.project.isAdmin(window.user),
      nonFishBreedingAreas: this.recordSet('OverlapWithNonFishBreedingAreas', 'OverlapWithNonFishBreedingAreas').toArray(),
      habitats: this.recordSet('OverlapWithBiogenicAndCommunityFormingSpecies', 'OverlapWithBiogenicAndCommunityFormingSpecies').toArray(),
      importantAreas: importantAreas,
      hasImportantAreas: hasImportantAreas,
      criticalHabitat: criticalHabitat,
      hasCriticalHabitat: hasCriticalHabitat,
      marineBirds: marineBirds,
      hasMarineBirds: hasMarineBirds,
      marineEcosections: marineEcosections,
      hasMarineEcosections: hasMarineEcosections,
      oceanographicRegions: oceanographicRegions,
      hasOceanographicRegions: hasOceanographicRegions,
      benthicClasses: benthicClasses,
      hasBenthicClasses: hasBenthicClasses,
      highTideAreas: highTideAreas,
      hasHighTideAreas: hasHighTideAreas,
      marxanAnalyses: _.map(this.recordSet("MarxanAnalysis", "MarxanAnalysis").toArray(), function(f) {
        return f.NAME;
      }),
      hasPMZs: hasPMZs,
      hasSMZs: hasSMZs
    };
    this.$el.html(this.template.render(context, templates));
    this.enableTablePaging();
    this.enableLayerTogglers();
    this.$('.chosen').chosen({
      disable_search_threshold: 10,
      width: '400px'
    });
    this.$('.chosen').change(function() {
      return _.defer(_this.renderMarxanAnalysis);
    });
    return this.renderMarxanAnalysis();
  };

  ArrayEnvironmentTab.prototype.renderMarxanAnalysis = function() {
    var color, data, domain, el, height, histo, i, margin, max_q, min_q, name, q, quantile, quantile_desc, quantile_range, quantiles, records, svg, width, x, xAxis, y, yAxis, _i, _j, _len, _len1;
    if (window.d3) {
      name = this.$('.chosen').val();
      records = this.recordSet("MarxanAnalysis", "MarxanAnalysis").toArray();
      quantile_range = {
        "Q0": "very low",
        "Q20": "low",
        "Q40": "mid",
        "Q60": "high",
        "Q80": "very high"
      };
      data = _.find(records, function(record) {
        return record.NAME === name;
      });
      histo = data.HISTO.slice(1, data.HISTO.length - 1).split(/\s/);
      histo = _.filter(histo, function(s) {
        return s.length > 0;
      });
      histo = _.map(histo, function(val) {
        return parseInt(val);
      });
      quantiles = _.filter(_.keys(data), function(key) {
        return key.indexOf('Q') === 0;
      });
      for (i = _i = 0, _len = quantiles.length; _i < _len; i = ++_i) {
        q = quantiles[i];
        if (parseFloat(data[q]) > parseFloat(data.SCORE) || i === quantiles.length - 1) {
          max_q = quantiles[i];
          min_q = quantiles[i - 1] || "Q0";
          quantile_desc = quantile_range[min_q];
          break;
        }
      }
      this.$('.scenarioResults').html("The average Marxan score for this collection is <strong>" + data.SCORE + "</strong>, placing it in \nthe <strong>" + quantile_desc + "</strong> quantile range <strong>(" + (min_q.replace('Q', '')) + "% - " + (max_q.replace('Q', '')) + "%)</strong> \nfor this sub-region. All Marxan planning units for the sub-region have been ranked by sum solution \nscore and divided into five quantiles of equal proportion.");
      this.$('.scenarioDescription').html(data.MARX_DESC.replace('this zone ', 'zones within this proposal '));
      domain = _.map(quantiles, function(q) {
        return data[q];
      });
      domain.push(100);
      domain.unshift(0);
      color = d3.scale.linear().domain(domain).range(["#47ae43", "#6c0", "#ee0", "#eb4", "#ecbb89", "#eeaba0"].reverse());
      quantiles = _.map(quantiles, function(key) {
        var max, min;
        max = parseFloat(data[key]);
        min = parseFloat(data[quantiles[_.indexOf(quantiles, key) - 1]] || 0);
        return {
          range: "" + (parseInt(key.replace('Q', '')) - 20) + "-" + (key.replace('Q', '')) + "%",
          name: key,
          start: min,
          end: max,
          bg: color((max + min) / 2)
        };
      });
      this.$('.viz').html('');
      el = this.$('.viz')[0];
      x = d3.scale.linear().domain([0, 100]).range([0, 400]);
      margin = {
        top: 5,
        right: 20,
        bottom: 30,
        left: 45
      };
      width = 400 - margin.left - margin.right;
      height = 300 - margin.top - margin.bottom;
      x = d3.scale.linear().domain([0, 100]).range([0, width]);
      y = d3.scale.linear().range([height, 0]).domain([0, d3.max(histo)]);
      xAxis = d3.svg.axis().scale(x).orient("bottom");
      yAxis = d3.svg.axis().scale(y).orient("left");
      svg = d3.select(this.$('.viz')[0]).append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + ", " + margin.top + ")");
      svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis).append("text").attr("x", width / 2).attr("dy", "3em").style("text-anchor", "middle").text("Score");
      svg.append("g").attr("class", "y axis").call(yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end").text("Number of Planning Units");
      svg.selectAll(".bar").data(histo).enter().append("rect").attr("class", "bar").attr("x", function(d, i) {
        return x(i);
      }).attr("width", width / 100).attr("y", function(d) {
        return y(d);
      }).attr("height", function(d) {
        return height - y(d);
      }).style('fill', function(d, i) {
        q = _.find(quantiles, function(q) {
          return i >= q.start && i <= q.end;
        });
        return (q != null ? q.bg : void 0) || "steelblue";
      });
      svg.selectAll(".score").data([Math.round(data.SCORE)]).enter().append("text").attr("class", "score").attr("x", function(d) {
        return (x(d) - 8) + 'px';
      }).attr("y", function(d) {
        return (y(histo[d]) - 10) + 'px';
      }).text("▼");
      svg.selectAll(".scoreText").data([Math.round(data.SCORE)]).enter().append("text").attr("class", "scoreText").attr("x", function(d) {
        return (x(d) - 6) + 'px';
      }).attr("y", function(d) {
        return (y(histo[d]) - 30) + 'px';
      }).text(function(d) {
        return d;
      });
      this.$('.viz').append('<div class="legends"></div>');
      for (_j = 0, _len1 = quantiles.length; _j < _len1; _j++) {
        quantile = quantiles[_j];
        this.$('.viz .legends').append("<div class=\"legend\"><span style=\"background-color:" + quantile.bg + ";\">&nbsp;</span>" + quantile.range + "</div>");
      }
      this.$('.viz').append('<br style="clear:both;">');
      return this.$('');
    }
  };

  return ArrayEnvironmentTab;

})(ReportTab);

module.exports = ArrayEnvironmentTab;


},{"../templates/templates.js":16,"reportTab":"a21iR2"}],14:[function(require,module,exports){
var ArrayOverviewTab, ReportTab, key, partials, templates, val, _partials, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ReportTab = require('reportTab');

templates = require('../templates/templates.js');

_partials = require('../node_modules/seasketch-reporting-api/templates/templates.js');

partials = [];

for (key in _partials) {
  val = _partials[key];
  partials[key.replace('node_modules/seasketch-reporting-api/', '')] = val;
}

ArrayOverviewTab = (function(_super) {
  __extends(ArrayOverviewTab, _super);

  function ArrayOverviewTab() {
    _ref = ArrayOverviewTab.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ArrayOverviewTab.prototype.name = 'Overview';

  ArrayOverviewTab.prototype.className = 'overview';

  ArrayOverviewTab.prototype.template = templates.arrayOverview;

  ArrayOverviewTab.prototype.dependencies = ['ZoneSize'];

  ArrayOverviewTab.prototype.timeout = 600000;

  ArrayOverviewTab.prototype.render = function() {
    var TableOfContents, context, node, nodes, sc_name, _i, _len;
    sc_name = this.recordSet('ZoneSize', 'ZoneSize').raw('SC_NAME');
    sc_name = sc_name.replace(/Zone/, "marine plan area");
    context = {
      sketch: this.model.forTemplate(),
      sketchClass: this.sketchClass.forTemplate(),
      attributes: this.model.getAttributes(),
      admin: this.project.isAdmin(window.user),
      size: this.recordSet('ZoneSize', 'ZoneSize').float('SIZE_SQ_KM', 2),
      percent: this.recordSet('ZoneSize', 'ZoneSize').float('SIZE_PERC', 1),
      sc_name: sc_name,
      numChildren: this.children.length
    };
    this.$el.html(this.template.render(context, partials));
    this.enableLayerTogglers();
    nodes = [this.model];
    this.model.set('open', true);
    nodes = nodes.concat(this.children);
    for (_i = 0, _len = nodes.length; _i < _len; _i++) {
      node = nodes[_i];
      node.set('selected', false);
    }
    TableOfContents = window.require('views/tableOfContents');
    this.toc = new TableOfContents(nodes);
    this.$('.tocContainer').append(this.toc.el);
    return this.toc.render();
  };

  ArrayOverviewTab.prototype.remove = function() {
    var _ref1;
    if ((_ref1 = this.toc) != null) {
      _ref1.remove();
    }
    return ArrayOverviewTab.__super__.remove.call(this);
  };

  return ArrayOverviewTab;

})(ReportTab);

module.exports = ArrayOverviewTab;


},{"../node_modules/seasketch-reporting-api/templates/templates.js":"CNqB+b","../templates/templates.js":16,"reportTab":"a21iR2"}],15:[function(require,module,exports){
var ArrayCultureTab, ArrayEconomicTab, ArrayEnvironmentTab, ArrayOverviewTab;

ArrayOverviewTab = require('./arrayOverviewTab.coffee');

ArrayEnvironmentTab = require('./arrayEnvironmentTab.coffee');

ArrayEconomicTab = require('./arrayEconomicTab.coffee');

ArrayCultureTab = require('./arrayCultureTab.coffee');

window.app.registerReport(function(report) {
  report.tabs([ArrayOverviewTab, ArrayEnvironmentTab, ArrayEconomicTab, ArrayCultureTab]);
  return report.stylesheets(['./report.css']);
});


},{"./arrayCultureTab.coffee":11,"./arrayEconomicTab.coffee":12,"./arrayEnvironmentTab.coffee":13,"./arrayOverviewTab.coffee":14}],16:[function(require,module,exports){
this["Templates"] = this["Templates"] || {};
this["Templates"]["arrayCulture"] = new Hogan.Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("  <h4>Overlap with Existing Protected Areas <a href=\"#\" data-toggle-node=\"520d4c2a674659cb7b35d575\" data-visible=\"false\">show layer</a></h4>");_.b("\n" + i);_.b("  <table data-paging=\"10\" data-no-rows=\"Does not overlap any Existing Protected Areas. MaPP recommends spatial locations for marine protection that include either or both ecological and cultural values, including areas that contribute to a Marine Protected Area network for the Northern Shelf Bioregion.\">");_.b("\n" + i);_.b("    <thead>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <th>Protected Area</th>");_.b("\n" + i);_.b("        <th>Overlap (km²)</th>");_.b("\n" + i);_.b("        <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </thead>");_.b("\n" + i);_.b("    <tbody>");_.b("\n" + i);if(!_.s(_.f("hasOverlapWithExistingMPAs",c,p,1),c,p,1,0,0,"")){_.b("        <tr>");_.b("\n" + i);_.b("          <td colspan=\"3\" style=\"text-align:center;\">");_.b("\n" + i);_.b("            <p>No overlap with existing protected areas</p>");_.b("\n" + i);_.b("          </td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");};if(_.s(_.f("existingMPAs",c,p,1),c,p,0,912,1030,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <tr>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("      </tr>");_.b("\n");});c.pop();}_.b("    </tbody>");_.b("\n" + i);_.b("    <tfoot>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <td colspan=\"3\" class=\"paragraph\">");_.b("\n" + i);if(_.s(_.f("hasPMZs",c,p,1),c,p,0,1149,1570,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("            <p>");_.b("\n" + i);_.b("              MaPP recommends spatial locations for marine protection that include both ecological and cultural values, including areas that may contribute to a Marine Protected Area network for the Northern Shelf Bioregion.  When determining locations for protection, where possible build on existing zoning efforts that are consistent with desired protected area objectives.");_.b("\n" + i);_.b("            </p>");_.b("\n");});c.pop();}if(_.s(_.f("hasSMZs",c,p,1),c,p,0,1605,1896,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("            <p>");_.b("\n" + i);_.b("              To reduce potential conflicts between uses and activities, Special Management Zones should not overlap with existing protected areas.  Adjacent protected areas may be a benefit to this zone and are displayed for planning purposes.  ");_.b("\n" + i);_.b("            </p>");_.b("\n");});c.pop();}_.b("\n" + i);_.b("          <p>* = Overlap (%) calculates the proportion of the sub-regional total of the Existing Protected Area (marine portion) that falls within the boundary of this collection.</p>");_.b("\n" + i);_.b("        </td>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </tfoot>");_.b("\n" + i);_.b("  </table>");_.b("\n" + i);_.b("  <!-- <a href=\"#\" data-toggle-node=\"51f5545c08dc4f5f2d216146\" data-visible=\"false\">show habitats layer</a> -->");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("\n" + i);_.b("<div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("  <h4>Overlap with Fisheries Closures (2011)</h4>");_.b("\n" + i);_.b("  <table data-paging=\"10\" data-no-rows=\"Does not overlap any Fisheries Closures. Fisheries closures may need to be considered to reduce potential conflicts between uses and activities. Federal Rockfish Conservation Areas and Federal Sponge Reef Reserve are analysed for overlap with ");if(_.s(_.f("array",c,p,1),c,p,0,2650,2676,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("zones within this proposal");});c.pop();}if(!_.s(_.f("array",c,p,1),c,p,1,0,0,"")){_.b("this zone");};_.b(". \">");_.b("\n" + i);_.b("    <thead>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <th>Fishery Closure</th>");_.b("\n" + i);_.b("        <th>Overlap (km²)</th>");_.b("\n" + i);_.b("        <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("        <th>Closure Start</th>");_.b("\n" + i);_.b("        <th>Closure End</th>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </thead>");_.b("\n" + i);_.b("    <tbody>");_.b("\n" + i);if(!_.s(_.f("hasClosures",c,p,1),c,p,1,0,0,"")){_.b("          <tr>");_.b("\n" + i);_.b("          <td colspan=\"5\" style=\"text-align:center;\">");_.b("\n" + i);_.b("            <p>No overlap with fisheries closures</p>");_.b("\n" + i);_.b("          </td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");};if(_.s(_.f("closures",c,p,1),c,p,0,3165,3347,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <tr>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("CLOSURE_ST",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("CLOSURE_EN",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("      </tr>");_.b("\n");});c.pop();}_.b("    </tbody>");_.b("\n" + i);_.b("    <tfoot>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <td colspan=\"5\" class=\"paragraph\">");_.b("\n" + i);_.b("          <p>");_.b("\n" + i);_.b("            Fisheries closures may need to be considered to reduce potential conflicts between uses and activities. Spatial data for closures is current as of the date noted.  Refer to individual Integrated Fisheries Management Plans for current closures and associated start and end dates. Federal Rockfish Conservation Areas and Federal Sponge Reef Reserves are also analysed for overlap in this report. 2011 Commercial Fisheries Closures data set compiled by Living Oceans Society. DFO has not reviewed or validated the accuracy of the fishery closure spatial data set.");_.b("\n" + i);_.b("          </p>");_.b("\n" + i);_.b("          <p>* = Overlap (%) calculates the proportion of the sub-regional total of the fishery closure(s) that fall within the boundary of this collection</p>");_.b("\n" + i);_.b("        </td>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </tfoot>");_.b("\n" + i);_.b("  </table>");_.b("\n" + i);_.b("  <!-- <a href=\"#\" data-toggle-node=\"51f5545c08dc4f5f2d216146\" data-visible=\"false\">show habitats layer</a> -->");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("<div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("  <h4>Overlap with Provincial Tenures <a href=\"#\" data-toggle-node=\"51f2f5cba72ec0681606208e\" data-visible=\"false\">show layer</a></h4>");_.b("\n" + i);_.b("  <table data-paging=\"10\" data-no-rows=\"Does not overlap any Provincial Tenures.\">");_.b("\n" + i);_.b("    <thead>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <th>Tenures</th>");_.b("\n" + i);_.b("        <th>Overlap (km²)</th>");_.b("\n" + i);_.b("        <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </thead>");_.b("\n" + i);_.b("    <tbody>");_.b("\n" + i);if(!_.s(_.f("hasProvincialTenures",c,p,1),c,p,1,0,0,"")){_.b("        <tr>");_.b("\n" + i);_.b("          <td colspan=\"3\" style=\"text-align:center;\">");_.b("\n" + i);_.b("            <p>No overlap with Provincial Tenures</p>");_.b("\n" + i);_.b("          </td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");};if(_.s(_.f("provincial",c,p,1),c,p,0,5025,5143,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <tr>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("      </tr>");_.b("\n");});c.pop();}_.b("    </tbody>");_.b("\n" + i);_.b("    <tfoot>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <td colspan=\"3\" class=\"paragraph\">");_.b("\n" + i);_.b("          <p>");_.b("\n" + i);_.b("          To avoid, minimise and/or reduce potential conflicts between existing tenured uses and potential activities, examine the overlap with provincial crown tenures from the BC Provincial tenures database. Data source: Provincial Tenures. Updated: Dec 2013");_.b("\n" + i);_.b("          </p>");_.b("\n" + i);_.b("          <p>* = Overlap (%) calculates the proportion of the sub-regional total of the tenure(s) that fall within the boundary of this collection</p>");_.b("\n" + i);_.b("        </td>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </tfoot>");_.b("\n" + i);_.b("  </table>");_.b("\n" + i);_.b("  <!-- <a href=\"#\" data-toggle-node=\"51f5545c08dc4f5f2d216146\" data-visible=\"false\">show habitats layer</a> -->");_.b("\n" + i);_.b("</div>");return _.fl();;});
this["Templates"]["arrayEconomic"] = new Hogan.Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("  <h4>Overlap With Commercial Fisheries <a href=\"#\" data-toggle-node=\"532c70d2ea4d2d254ba05d14\" data-visible=\"false\">show layers</a></h4>");_.b("\n" + i);_.b("  <table  data-paging=\"10\" data-no-rows=\"Does not overlap any commercial fisheries.\" >");_.b("\n" + i);_.b("    <thead>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <th>Commercial Fishery</th>");_.b("\n" + i);_.b("        <th>Data Available for Years</th>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </thead>");_.b("\n" + i);_.b("    <tbody>");_.b("\n" + i);if(_.s(_.f("fisheries",c,p,1),c,p,0,426,530,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <tr>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("FISH_NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("START_YR",c,p,0)));_.b(" - ");_.b(_.v(_.f("END_YR",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("      </tr>");_.b("\n");});c.pop();}_.b("    </tbody>");_.b("\n" + i);_.b("    <tfoot>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <td colspan=\"3\" class=\"paragraph\">");_.b("\n" + i);_.b("          Existing marine activities should be considered when identifying areas for protection or special management.  This report summarizes the commercial fisheries which occur within the boundaries of the zone/collection based on the most recent available spatial data.  The spatial data is in the form of multi-year amalgamated 4km x 4km or 10km x 10km catch/effort grid data or, in the case of the salmon fishery, salmon catch estimate areas. The years which are represented by the data are noted following the name of the commercial fishery. NOTE: Not all catch and effort is represented by the spatial data.  Due to confidentiality restrictions a minimum of three vessels must be reporting within a given grid cell for it to be included.");_.b("\n" + i);_.b("        </td>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </tfoot>");_.b("\n" + i);_.b("  </table>");_.b("\n" + i);_.b("</div>");_.b("\n" + i);if(_.s(_.f("hasInvestRecValues",c,p,1),c,p,0,1450,2568,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("<div class=\"reportSection\">");_.b("\n" + i);_.b("  <h4>Overlap with Recreation Visitation <a href=\"#\" data-toggle-node=\"52a775e23c2042124b004fa4\" data-visible=\"false\">show inVEST layer</a></h4>");_.b("\n" + i);_.b("  <p class=\"large\">");_.b("\n" + i);_.b("    The Recreation & Tourism SMZs in this collection have an average recreational relative importance of <strong>");_.b(_.v(_.f("investAvgRecValue",c,p,0)));_.b(".</strong> Values across the MaPP region range from 0 to 4.8, with higher numbers indicating greater recreation value.");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("  <p> ");_.b("\n" + i);_.b("    Recreation and tourism are important components of many national and local economies and they contribute in innumerable ways to physical wellbeing, learning, and quality of life. To quantify the value of natural environments, the InVEST recreation model predicts the spread of person-days of recreation. In the absence of empirical data on visitation, the InVEST model uses a proxy for visitation: geotagged photographs posted to the website flickr.  The InVEST tool computes the total annual days that a user took at least one photograph within each cell, then returns to users the average annual number of photo-user-days from 2005-2012");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("</div>");_.b("\n");});c.pop();}if(_.s(_.f("showFisheriesEffort",c,p,1),c,p,0,2616,3823,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("  <div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("    <h4>Fisheries </h4>");_.b("\n" + i);_.b("    <p class=\"in-report-header\">Catch (kg)</p>");_.b("\n" + i);_.b("    <table data-paging=\"10\">");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th>Name</th>");_.b("\n" + i);_.b("          <th>Total</th>");_.b("\n" + i);_.b("          <th>% of Subregion</th>");_.b("\n" + i);_.b("          <th>% of Region</th>");_.b("\n" + i);_.b("          <th>% of Coast</th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);if(_.s(_.f("fe_catch",c,p,1),c,p,0,2997,3181,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("TOT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("SUB_TOT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("REG_TOT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CST_TOT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table>");_.b("\n" + i);_.b("\n" + i);_.b("    <p class=\"in-report-header\">Effort - Varies by Fishery (Dive Hours, Soaktime Hours, etc.)</p>");_.b("\n" + i);_.b("    <table data-paging=\"10\">");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th>Name</th>");_.b("\n" + i);_.b("          <th>Total</th>");_.b("\n" + i);_.b("          <th>% of Subregion</th>");_.b("\n" + i);_.b("          <th>% of Region</th>");_.b("\n" + i);_.b("          <th>% of Coast</th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);if(_.s(_.f("fe_effort",c,p,1),c,p,0,3587,3771,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("TOT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("SUB_TOT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("REG_TOT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CST_TOT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table>");_.b("\n" + i);_.b("  </div>");_.b("\n");});c.pop();}return _.fl();;});
this["Templates"]["arrayEnvironment"] = new Hogan.Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("  <h4>Habitat: Overlap with Biogenic/Community Forming Species</h4>");_.b("\n" + i);_.b("  <table data-paging=\"10\">");_.b("\n" + i);_.b("    <thead>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <th >Habitat</th>");_.b("\n" + i);_.b("        <th>Overlap (km²)</th>");_.b("\n" + i);_.b("        <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </thead>");_.b("\n" + i);_.b("    <tbody>");_.b("\n" + i);if(_.s(_.f("habitats",c,p,1),c,p,0,315,430,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <tr>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("HAB_NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td></tr>");_.b("\n");});c.pop();}_.b("    </tbody>");_.b("\n" + i);_.b("    <tfoot>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <td colspan=\"4\" class=\"paragraph\">");_.b("\n" + i);if(_.s(_.f("hasPMZs",c,p,1),c,p,0,545,901,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("            <p>");_.b("\n" + i);_.b("            In Protection Management Zones, representation is often one criteria for siting in a network.  This report calculates the representation of a number of biogenic habitats and community forming species including kelp (various types), eelgrass, sponge reefs and corals within the boundaries of the PMZ.");_.b("\n" + i);_.b("            </p>");_.b("\n");});c.pop();}if(_.s(_.f("hasSMZs",c,p,1),c,p,0,936,1324,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("            <p>");_.b("\n" + i);_.b("            The potential impact of activities on marine habitats is an important consideration when identifying locations for Special Management Zones.  This report calculates the overlap of the proposed SMZ(s) with a number of biogenic habitats and community forming species including kelp (various types), eelgrass, sponge reefs and corals.");_.b("\n" + i);_.b("            </p>");_.b("\n");});c.pop();}_.b("          <p>* = Overlap (%) calculates the proportion of the sub-regional total of the habitat types that fall within the boundary of this collection</p>");_.b("\n" + i);_.b("        </td>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </tfoot>");_.b("\n" + i);_.b("  </table>");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("<div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("  <h4>Habitat: Overlap with Important Areas, IBAs & Critical Habitat</h4>");_.b("\n" + i);if(_.s(_.f("hasImportantAreas",c,p,1),c,p,0,1690,2121,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("    <table>");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th width=\"250px\"><strong>Important Area</strong></th>");_.b("\n" + i);_.b("          <th>Overlap (km²)</th>");_.b("\n" + i);_.b("          <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);if(_.s(_.f("importantAreas",c,p,1),c,p,0,1941,2071,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table>");_.b("\n");});c.pop();}if(_.s(_.f("hasMarineBirds",c,p,1),c,p,0,2165,2611,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("    </br>");_.b("\n" + i);_.b("    <table>");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th width=\"250px\"><strong>Important Bird Area (IBA) <strong></th>");_.b("\n" + i);_.b("          <th>Overlap (km²)</th>");_.b("\n" + i);_.b("          <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);if(_.s(_.f("marineBirds",c,p,1),c,p,0,2434,2564,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table>");_.b("\n");});c.pop();}if(_.s(_.f("hasCriticalHabitat",c,p,1),c,p,0,2656,3102,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("    </br>");_.b("\n" + i);_.b("    <table>");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th width=\"250px\"><strong>Critical Habitat </strong></th>");_.b("\n" + i);_.b("          <th>Overlap (km²)</th>");_.b("\n" + i);_.b("          <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);if(_.s(_.f("criticalHabitat",c,p,1),c,p,0,2921,3051,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table>");_.b("\n");});c.pop();}_.b("  <p>");_.b("\n" + i);if(_.s(_.f("hasPMZs",c,p,1),c,p,0,3148,4012,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <p>");_.b("\n" + i);_.b("        To reduce potential conflicts between human uses and marine species, consider these identified important areas for marine mammals, fish and marine birds.  Note that these areas do not include all of the foraging and breeding locations for marine species in the MaPP study area. ");_.b("\n" + i);_.b("      </p>");_.b("\n" + i);_.b("      <p>");_.b("\n" + i);_.b("        Important Areas were identified during the process of establishing Ecologically and Biologically Significant Areas (EBSAs) by the <a href=\"http://pncima.org/site/atlas.html\" target=\"_blank\"> Pacific North Coast Integrated Management Area (PNCIMA)</a>. Important Bird Areas (IBAs) were also identified by Bird Studies Canada and Nature Canada, in partnership with BirdLife International.  Critical Habitat meets Canada's Species at Risk (SARA) requirements. See data layers for more information.  Data sources: up to 2009.");_.b("\n" + i);_.b("      </p>");_.b("\n");});c.pop();}if(_.s(_.f("hasSMZs",c,p,1),c,p,0,4041,5005,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <p>");_.b("\n" + i);_.b("        To reduce potential conflicts between human uses and marine species, consider these Important Marine Areas for marine mammals, fish and birds.  These areas do not include all of the foraging and breeding locations for marine species in the MaPP study area. ");_.b("\n" + i);_.b("      </p>");_.b("\n" + i);_.b("      <p>");_.b("\n" + i);_.b("        Important Areas were identified during the process of establishing Ecologically and Biologically Significant Areas (EBSAs) by the <a href=\"http://pncima.org/site/atlas.html\" target=\"_blank\"> Pacific North Coast Integrated Management Area (PNCIMA)</a>. Important Bird Areas (IBAs) were also identified by Bird Studies Canada and Nature Canada, in partnership with BirdLife International.  Critical Habitat meets Canada's Species at Risk (SARA) requirements. Potential critical is insufficient information to meet SARA requirements. See the PNCIMA atlas for more information. See data layers for more information.  Data sources: up to 2009.");_.b("\n" + i);_.b("          </p>");_.b("\n");});c.pop();}_.b("        <p>* = Overlap (%) calculates the proportion of the sub-regional total of the habitat that falls within the boundary of this zone</p>");_.b("\n" + i);_.b("    </p>");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("<div class=\"reportSection\">");_.b("\n" + i);_.b("  <h4>Marxan Analysis</h4>");_.b("\n" + i);_.b("  <select class=\"chosen\" width=\"400px\">");_.b("\n" + i);if(_.s(_.f("marxanAnalyses",c,p,1),c,p,0,5294,5340,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("    <option value=\"");_.b(_.v(_.d(".",c,p,0)));_.b("\">");_.b(_.v(_.d(".",c,p,0)));_.b("</option>");_.b("\n");});c.pop();}_.b("  </select>");_.b("\n" + i);_.b("  <p class=\"scenarioResults\"></p>");_.b("\n" + i);_.b("  <div class=\"viz\"></div>");_.b("\n" + i);_.b("  <p class=\"scenarioDescription\"></p>");_.b("\n" + i);_.b("  <p>");_.b("\n" + i);_.b("    MaPP collaborated with the <a href=\"http://bcmca.ca/\" target=\"_blank\">BC Marine Conservation Analysis (BCMCA)</a> to use Marxan to identify marine areas of high conservation value based on spatial datasets of ecological information (features). These Marxan scenarios can be used to inform the location or siting of PMZs. <a href=\"http://www.uq.edu.au/marxan/\" target=\"_blank\">Marxan</a> is a decision support tool developed by the University of Queensland to provide solutions which capture a specified amount (target) of individual features for the least cost. The cost layer used for these Marxan runs was solely based on area. Based on relatively simple mathematical algorithms and equations, Marxan searches millions of potential solutions to find the best balance between costs and benefits. These MaPP Marxan solutions minimize the overall area subject to the constraint of meeting specified “targets” for all ecological features.");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("  <p>");_.b("\n" + i);_.b("    MaPP consulted the MaPP Science Advisory Committee (SAC) for advice on scenarios and target selection. The SAC supported the decision to use the percentage target categories established by the BCMCA project team in 2006. Please see this <a href=\"https://dl.dropboxusercontent.com/u/1764986/BCMCA-Marxan for MaPP-Report on initial scenarios_27Feb2013.pdf\" target=\"_blank\">2013 BCMCA report</a> for more information about the MaPP-BCMCA project and Marxan scenarios, and consult the <a href=\"http://bcmca.ca\" target=\"_blank\">BCMCA Atlas</a> for detailed information about targets, species, and habitats.");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("<div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("  <h4>Adjacent Breeding Sites for Birds and Mammals</h4>");_.b("\n" + i);_.b("  <table  data-paging=\"10\" data-no-rows=\"Is not adjacent to breeding sites for birds and mammals\">");_.b("\n" + i);_.b("    <thead>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <th>Species</th>");_.b("\n" + i);_.b("        <th>Number of Breeding Areas or Nesting Sites</th>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </thead>");_.b("\n" + i);_.b("    <tbody>");_.b("\n" + i);if(_.s(_.f("nonFishBreedingAreas",c,p,1),c,p,0,7424,7510,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <tr>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("SPECIES",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("COUNT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("      </tr>");_.b("\n");});c.pop();}_.b("    </tbody>");_.b("\n" + i);_.b("      <tfoot>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <td colspan=\"2\" class=\"paragraph\">");_.b("\n" + i);_.b("          <p>");_.b("\n" + i);_.b("            When selecting sites, consider proximity to breeding areas or nesting sites for birds and mammals in effort to minimize disturbance and protect adjacent foraging area. ");_.b("\n" + i);_.b("          </p>");_.b("\n" + i);_.b("        </td>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </tfoot>");_.b("\n" + i);_.b("  </table>");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("<div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("  <h4>Habitat: Overlap with Marine Classifications and Oceanographic Regions</h4>");_.b("\n" + i);if(_.s(_.f("hasMarineEcosections",c,p,1),c,p,0,8036,8553,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("    <table  data-paging=\"10\" data-no-rows=\"Does not overlap any Marine Ecosections\">");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th width=\"250px\"><strong>Marine Ecosection</strong></th>");_.b("\n" + i);_.b("          <th>Overlap (km²)</th>");_.b("\n" + i);_.b("          <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);if(_.s(_.f("marineEcosections",c,p,1),c,p,0,8366,8500,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("HAB_NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table>");_.b("\n");});c.pop();}if(_.s(_.f("hasHighTideAreas",c,p,1),c,p,0,8602,9107,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("    </br>");_.b("\n" + i);_.b("    <table  data-no-rows=\"Does not overlap any High Tide Areas\">");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th width=\"250px\"><strong>High Tidal Current Area</strong></th>");_.b("\n" + i);_.b("          <th>Overlap (km²)</th>");_.b("\n" + i);_.b("          <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);if(_.s(_.f("highTideAreas",c,p,1),c,p,0,8924,9058,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("HAB_NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table>");_.b("\n");});c.pop();}if(_.s(_.f("hasOceanographicRegions",c,p,1),c,p,0,9159,9697,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("    </br>");_.b("\n" + i);_.b("    <table  data-paging=\"10\" data-no-rows=\"Does not overlap any Oceanographic Regions\">");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th width=\"250px\"><strong>Oceanographic Region</strong></th>");_.b("\n" + i);_.b("          <th>Overlap (km²)</th>");_.b("\n" + i);_.b("          <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);if(_.s(_.f("oceanographicRegions",c,p,1),c,p,0,9508,9642,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("HAB_NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table");_.b("\n");});c.pop();}if(_.s(_.f("hasBenthicClasses",c,p,1),c,p,0,9750,10264,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("    </br>");_.b("\n" + i);_.b("    <table  data-paging=\"10\" data-no-rows=\"Does not overlap any Benthic Classes\">");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th width=\"250px\"><strong>Benthic Class</strong></th>");_.b("\n" + i);_.b("          <th>Overlap (km²)</th>");_.b("\n" + i);_.b("          <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);if(_.s(_.f("benthicClasses",c,p,1),c,p,0,10080,10214,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("HAB_NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table>");_.b("\n");});c.pop();}_.b("  <p>");_.b("\n" + i);if(_.s(_.f("hasPMZs",c,p,1),c,p,0,10309,10570,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <p>");_.b("\n" + i);_.b("        In Protection Management Zones, representation of habitat types is often one criteria for siting in a network.  Data in this report includes Ecosections, oceanographic regions, benthic classes and areas of high tidal current. ");_.b("\n" + i);_.b("      </p>");_.b("\n");});c.pop();}if(_.s(_.f("hasSMZs",c,p,1),c,p,0,10599,10932,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <p>");_.b("\n" + i);_.b("        The potential impact of activities on marine habitats is an important consideration when identifying locations for Special Management Zones.  ");_.b("\n" + i);_.b("        This report calculates the overlap of the proposed SMZ(s) with Ecosections, oceanographic regions, benthic classes and areas of high tidal current.");_.b("\n" + i);_.b("      </p>");_.b("\n");});c.pop();}_.b("    <p>* = Overlap (%) calculates the proportion of the sub-regional total of the classification/region type that fall within the boundary of this zone</p>");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("</div>");_.b("\n");return _.fl();;});
this["Templates"]["arrayOverview"] = new Hogan.Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"reportSection\">");_.b("\n" + i);_.b("  <h4>Size</h4>");_.b("\n" + i);_.b("  <p class=\"large\">");_.b("\n" + i);_.b("    This regional proposal contains ");_.b(_.v(_.f("numChildren",c,p,0)));_.b(" zones and covers a total of <strong>");_.b(_.v(_.f("size",c,p,0)));_.b(" square kilometers</strong>, which represents <strong>");_.b(_.v(_.f("percent",c,p,0)));_.b("%</strong> of the ");_.b(_.v(_.f("sc_name",c,p,0)));_.b(".");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("  <div class=\"tocContainer\"></div>");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("\n" + i);_.b("<!-- ");if(_.s(_.f("adjacentProtectedArea",c,p,1),c,p,0,337,813,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("\n" + i);_.b("<div class=\"reportSection\">");_.b("\n" + i);_.b("  <h4>Nearby Areas</h4>");_.b("\n" + i);_.b("  <p class=\"large green-check\">");_.b("\n" + i);_.b("    Zones within this proposal are adjacent to a <strong>Terrestrial Protected Area</strong>.");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("  <p>");_.b("\n" + i);_.b("    Build on past and existing zoning efforts that are consistent with an ecosystem-based management approach.  Wherever possible, do not duplicate existing zoning efforts and consider existing terrestrial zoning for adjacent marine zoning to achieve zoning objectives.");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("</div>");_.b("\n");});c.pop();}_.b(" -->");_.b("\n" + i);_.b("<!-- <div class=\"reportSection\">");_.b("\n" + i);_.b("  <h4>Transmission Lines <a href=\"#\" data-toggle-node=\"51f6ad677bbb9b2457020f52\" data-visible=\"false\">show layer</a></h4>");_.b("\n" + i);_.b("  <p class=\"large\">");_.b("\n" + i);_.b("    This zone is ");_.b(_.v(_.f("transmissionLines",c,p,0)));_.b(" km from the nearest transmission lines.");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b(" -->");_.b("\n" + i);if(_.s(_.f("attributes",c,p,1),c,p,0,1133,1259,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("<div class=\"reportSection\">");_.b("\n" + i);_.b("  <h4>");_.b(_.v(_.d("sketchClass.name",c,p,0)));_.b(" Attributes</h4>");_.b("\n" + i);_.b(_.rp("attributes/attributesTable",c,p,"    "));_.b("  </table>");_.b("\n" + i);_.b("</div>");_.b("\n");});c.pop();}return _.fl();;});
this["Templates"]["culture"] = new Hogan.Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("  <h4>Overlap with Existing Protected Areas <a href=\"#\" data-toggle-node=\"520d4c2a674659cb7b35d575\" data-visible=\"false\">show layer</a></h4>");_.b("\n" + i);_.b("  <table data-paging=\"10\" data-no-rows=\"Does not overlap any Existing Protected Areas. MaPP recommends spatial locations for marine protection that include either or both ecological and cultural values, including areas that contribute to a Marine Protected Area network for the Northern Shelf Bioregion.\">");_.b("\n" + i);_.b("    <thead>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <th>Protected Area</th>");_.b("\n" + i);_.b("        <th>Overlap (km²)</th>");_.b("\n" + i);_.b("        <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </thead>");_.b("\n" + i);_.b("    <tbody>");_.b("\n" + i);if(!_.s(_.f("hasOverlapWithExistingMPAs",c,p,1),c,p,1,0,0,"")){_.b("        <tr>");_.b("\n" + i);_.b("          <td colspan=\"3\" style=\"text-align:center;\">");_.b("\n" + i);_.b("            <p>No overlap with existing protected areas</p>");_.b("\n" + i);_.b("          </td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");};if(_.s(_.f("existingMPAs",c,p,1),c,p,0,910,1028,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <tr>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("      </tr>");_.b("\n");});c.pop();}_.b("    </tbody>");_.b("\n" + i);_.b("    <tfoot>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <td colspan=\"3\" class=\"paragraph\">");_.b("\n" + i);if(_.s(_.f("pmz",c,p,1),c,p,0,1143,1529,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("            MaPP recommends spatial locations for marine protection that include both ecological and cultural values, including areas that may contribute to a Marine Protected Area network for the Northern Shelf Bioregion.  When determining locations for protection, where possible build on existing zoning efforts that are consistent with desired protected area objectives.");_.b("\n");});c.pop();}if(_.s(_.f("smz",c,p,1),c,p,0,1556,1812,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("            To reduce potential conflicts between uses and activities, Special Management Zones should not overlap with existing protected areas.  Adjacent protected areas may be a benefit to this zone and are displayed for planning purposes.  ");_.b("\n");});c.pop();}_.b("          <p>* = Overlap (%) calculates the proportion of the sub-regional total of the Existing Protected Area (marine portion) that falls within the boundary of the zone.</p> ");_.b("\n" + i);_.b("        </td>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </tfoot>");_.b("\n" + i);_.b("  </table>");_.b("\n" + i);_.b("  <!-- <a href=\"#\" data-toggle-node=\"51f5545c08dc4f5f2d216146\" data-visible=\"false\">show habitats layer</a> -->");_.b("\n" + i);_.b("</div>");_.b("\n" + i);if(_.s(_.f("adjacentProtectedArea",c,p,1),c,p,0,2194,2910,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("<div class=\"reportSection\">");_.b("\n" + i);_.b("  <h4>Adjacency to Terrestrial Protected Areas</h4>");_.b("\n" + i);_.b("  <p class=\"large green-check\">");_.b("\n" + i);_.b("\n" + i);_.b("    This zone is adjacent to a <strong>");_.b(_.v(_.f("adjacentProtectedAreaName",c,p,0)));_.b("</strong>, a <strong>Terrestrial Protected Area</strong> that is <strong>");_.b(_.v(_.f("adjacentProtectedAreaDist",c,p,0)));_.b(" km </strong> away.");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("  <p>");_.b("\n" + i);_.b("    Build on past and existing zoning efforts that are consistent with an ecosystem-based management approach.  Wherever possible, do not duplicate existing zoning efforts and consider existing terrestrial zoning for adjacent marine zoning to achieve zoning objectives. Terrestrial Protected Areas which are within a distance of 3 km are included in this report for planning purposes.");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("</div>");_.b("\n");});c.pop();}_.b("<div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("  <h4>Overlap with Fisheries Closures (2011)</h4>");_.b("\n" + i);_.b("  <table data-paging=\"10\" data-no-rows=\"Does not overlap any Fisheries Closures. Fisheries closures may need to be considered to reduce potential conflicts between uses and activities. Federal Rockfish Conservation Areas and Federal Sponge Reef Reserve are analysed for overlap with ");if(_.s(_.f("array",c,p,1),c,p,0,3323,3349,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("zones within this proposal");});c.pop();}if(!_.s(_.f("array",c,p,1),c,p,1,0,0,"")){_.b("this zone");};_.b(". \">");_.b("\n" + i);_.b("    <thead>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <th>Fishery Closure</th>");_.b("\n" + i);_.b("        <th>Overlap (km²)</th>");_.b("\n" + i);_.b("        <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("        <th>Closure Start</th>");_.b("\n" + i);_.b("        <th>Closure End</th>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </thead>");_.b("\n" + i);_.b("    <tbody>");_.b("\n" + i);if(!_.s(_.f("hasClosures",c,p,1),c,p,1,0,0,"")){_.b("          <tr>");_.b("\n" + i);_.b("          <td colspan=\"3\" style=\"text-align:center;\">");_.b("\n" + i);_.b("            <p>No overlap with fisheries closures</p>");_.b("\n" + i);_.b("          </td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");};if(_.s(_.f("closures",c,p,1),c,p,0,3836,4018,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <tr>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("CLOSURE_ST",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("CLOSURE_EN",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("      </tr>");_.b("\n");});c.pop();}_.b("    </tbody>");_.b("\n" + i);_.b("    <tfoot>");_.b("\n" + i);_.b("  ");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <td colspan=\"5\" class=\"paragraph\">");_.b("\n" + i);_.b("          <p>");_.b("\n" + i);_.b("            Fisheries closures may need to be considered to reduce potential conflicts between uses and activities. Spatial data for closures is current as of the date noted.  Refer to individual Integrated Fisheries Management Plans for current closures and associated start and end dates. Federal Rockfish Conservation Areas and Federal Sponge Reef Reserves are also analysed for overlap in this report. 2011 Commercial Fisheries Closures data set compiled by Living Oceans Society. DFO has not reviewed or validated the accuracy of the fishery closure spatial data set.");_.b("\n" + i);_.b("          </p>");_.b("\n" + i);_.b("          <p>* = Overlap (%) calculates the proportion of the sub-regional total of the fishery closure(s) that fall within the boundary of this zone</p>");_.b("\n" + i);_.b("        </td>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </tfoot>");_.b("\n" + i);_.b("  </table>");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("\n" + i);_.b("<div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("  <h4>Overlap with Provincial Tenures <a href=\"#\" data-toggle-node=\"51f2f5cba72ec0681606208e\" data-visible=\"false\">show layer</a></h4>");_.b("\n" + i);_.b("  <table data-paging=\"10\" data-no-rows=\"Does not overlap any Provincial Tenures.\">");_.b("\n" + i);_.b("    <thead>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <th>Tenures</th>");_.b("\n" + i);_.b("        <th>Overlap (km²)</th>");_.b("\n" + i);_.b("        <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </thead>");_.b("\n" + i);_.b("    <tbody>");_.b("\n" + i);if(!_.s(_.f("hasProvincialTenures",c,p,1),c,p,1,0,0,"")){_.b("        <tr>");_.b("\n" + i);_.b("          <td colspan=\"3\" style=\"text-align:center;\">");_.b("\n" + i);_.b("            <p>No overlap with Provincial Tenures</p>");_.b("\n" + i);_.b("          </td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");};if(_.s(_.f("provincial",c,p,1),c,p,0,5582,5700,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <tr>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("      </tr>");_.b("\n");});c.pop();}_.b("    </tbody>");_.b("\n" + i);_.b("    <tfoot>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <td colspan=\"3\" class=\"paragraph\">");_.b("\n" + i);_.b("          To avoid, minimise and/or reduce potential conflicts between existing tenured uses and potential activities, examine the overlap with provincial crown tenures from the BC Provincial tenures database. Data source: Provincial Tenures. Updated: Dec 2013");_.b("\n" + i);_.b("          <p>* = Overlap (%) calculates the proportion of the sub-regional total of the tenure(s) that fall within the boundary of this zone</p>");_.b("\n" + i);_.b("        </td>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </tfoot>");_.b("\n" + i);_.b("  </table>");_.b("\n" + i);_.b("  <!-- <a href=\"#\" data-toggle-node=\"51f5545c08dc4f5f2d216146\" data-visible=\"false\">show habitats layer</a> -->");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("\n");return _.fl();;});
this["Templates"]["demo"] = new Hogan.Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"reportSection\">");_.b("\n" + i);_.b("  <h4>Output</h4>");_.b("\n" + i);_.b("  <pre>");_.b(_.v(_.f("result",c,p,0)));_.b("</pre>");_.b("\n" + i);_.b("</div>");_.b("\n");return _.fl();;});
this["Templates"]["economic"] = new Hogan.Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("  <h4>Overlap With Commercial Fisheries <a href=\"#\" data-toggle-node=\"532c70d2ea4d2d254ba05d14\" data-visible=\"false\">show layers</a></h4>");_.b("\n" + i);_.b("  <table  data-paging=\"10\" data-no-rows=\"Does not overlap any commercial fisheries.\" >");_.b("\n" + i);_.b("    <thead>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <th>Commercial Fishery</th>");_.b("\n" + i);_.b("        <th>Data Available for Years</th>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </thead>");_.b("\n" + i);_.b("    <tbody>");_.b("\n" + i);if(_.s(_.f("fisheries",c,p,1),c,p,0,426,530,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <tr>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("FISH_NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("START_YR",c,p,0)));_.b(" - ");_.b(_.v(_.f("END_YR",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("      </tr>");_.b("\n");});c.pop();}_.b("    </tbody>");_.b("\n" + i);_.b("    <tfoot>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <td colspan=\"3\" class=\"paragraph\">");_.b("\n" + i);_.b("          Existing marine activities should be considered when identifying areas for protection or special management.  This report summarizes the commercial fisheries which occur within the boundaries of the zone/collection based on the most recent available spatial data.  The spatial data is in the form of multi-year amalgamated 4km x 4km or 10km x 10km catch/effort grid data or, in the case of the salmon fishery, salmon catch estimate areas. The years which are represented by the data are noted following the name of the commercial fishery. NOTE: Not all catch and effort is represented by the spatial data.  Due to confidentiality restrictions a minimum of three vessels must be reporting within a given grid cell for it to be included.");_.b("\n" + i);_.b("        </td>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </tfoot>");_.b("\n" + i);_.b("  </table>");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("<div class=\"reportSection\">");_.b("\n" + i);_.b("  <h4>Overlap with Recreation Visitation <a href=\"#\" data-toggle-node=\"52a775e23c2042124b004fa4\" data-visible=\"false\">show inVEST layer</a></h4>");_.b("\n" + i);_.b("  <p class=\"large\">");_.b("\n" + i);_.b("    This zone has an average recreational relative importance of <strong>");_.b(_.v(_.f("investAvgRecValue",c,p,0)));_.b(".</strong> Values across the MaPP region range from 0 to 4.8, with higher numbers indicating greater recreation value.");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("  <p> ");_.b("\n" + i);_.b("    Recreation and tourism are important components of many national and local economies and they contribute in innumerable ways to physical wellbeing, learning, and quality of life. To quantify the value of natural environments, the InVEST recreation model predicts the spread of person-days of recreation. In the absence of empirical data on visitation, the InVEST model uses a proxy for visitation: geotagged photographs posted to the website flickr.  The InVEST tool computes the total annual days that a user took at least one photograph within each cell, then returns to users the average annual number of photo-user-days from 2005-2012");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("</div>");_.b("\n" + i);if(!_.s(_.f("pmz",c,p,1),c,p,1,0,0,"")){if(_.s(_.f("isRenewableEnergy",c,p,1),c,p,0,2535,2993,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("<div class=\"reportSection\">");_.b("\n" + i);_.b("  <h4>Distance to Transmission Lines <a href=\"#\" data-toggle-node=\"51f6ad677bbb9b2457020f52\" data-visible=\"false\">show layer</a></h4>");_.b("\n" + i);_.b("  <p class=\"large\">");_.b("\n" + i);_.b("    This zone is <strong>");_.b(_.v(_.f("transmissionLines",c,p,0)));_.b("</strong> km from the nearest <strong>transmission lines</strong>. This horizontal, straight line distance might be helpful in calculating the possible economic costs for renewable energy development in this zone. ");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("</div>");_.b("\n");});c.pop();}_.b("<div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("  <h4>Distance to Infrastructure</h4>");_.b("\n" + i);_.b("  <table>");_.b("\n" + i);_.b("    <thead>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <th>Infrastructure</th>");_.b("\n" + i);_.b("        <th>Distance (km)</th>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </thead>");_.b("\n" + i);_.b("    <tbody>");_.b("\n" + i);if(_.s(_.f("infrastructure",c,p,1),c,p,0,3255,3341,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <tr>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("Name",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("DistInKM",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("      </tr>");_.b("\n");});c.pop();}_.b("    </tbody>");_.b("\n" + i);_.b("    <tfoot>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("      <td colspan=\"2\" class=\"paragraph\">");_.b("\n" + i);_.b("      The horizontal distance to ferries, ports, harbours, fuel docks, and other marine and coastal infrastructure might be helpful for planning marine uses and activities that are supported in this zone. A distance of 0.0 km indicates that the infrastructure feature is adjacent to or within the boundary of the zone.");_.b("\n" + i);_.b("      </td>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </tfoot>");_.b("\n" + i);_.b("  </table>");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("\n" + i);if(_.s(_.f("isTourism",c,p,1),c,p,0,3827,4200,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("<div class=\"reportSection\">");_.b("\n" + i);_.b("  <h4>Distance to Nearest Marine Protected Area</h4>");_.b("\n" + i);_.b("  <p class=\"large\">");_.b("\n" + i);_.b("    This zone is <strong>");_.b(_.v(_.f("distToMPAs",c,p,0)));_.b(" km</strong> from the <strong>");_.b(_.v(_.f("nearestMPA",c,p,0)));_.b("</strong>, the nearest protected area. Protected areas may have higher species diversity and may be");_.b("\n" + i);_.b("    important for siting commercial tourism zones. Data sources: Jan 2014");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("</div>");_.b("\n");});c.pop();}};_.b("\n" + i);if(_.s(_.f("showFisheriesEffort",c,p,1),c,p,0,4249,5457,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("  <div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("    <h4>Fisheries </h4>");_.b("\n" + i);_.b("    <p class=\"in-report-header\">Catch (kg)</p>");_.b("\n" + i);_.b("    <table data-paging=\"10\">");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th>Name</th>");_.b("\n" + i);_.b("          <th>Total</th>");_.b("\n" + i);_.b("          <th>% of Subregion</th>");_.b("\n" + i);_.b("          <th>% of Region</th>");_.b("\n" + i);_.b("          <th>% of Coast</th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);_.b("\n" + i);if(_.s(_.f("fe_catch",c,p,1),c,p,0,4631,4815,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("TOT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("SUB_TOT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("REG_TOT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CST_TOT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table>");_.b("\n" + i);_.b("\n" + i);_.b("    <p class=\"in-report-header\">Effort - Varies by Fishery (Dive Hours, Soaktime Hours, etc.)</p>");_.b("\n" + i);_.b("    <table data-paging=\"10\">");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th>Name</th>");_.b("\n" + i);_.b("          <th>Total</th>");_.b("\n" + i);_.b("          <th>% of Subregion</th>");_.b("\n" + i);_.b("          <th>% of Region</th>");_.b("\n" + i);_.b("          <th>% of Coast</th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);if(_.s(_.f("fe_effort",c,p,1),c,p,0,5221,5405,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("TOT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("SUB_TOT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("REG_TOT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CST_TOT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table>");_.b("\n" + i);_.b("  </div>");_.b("\n");});c.pop();}return _.fl();;});
this["Templates"]["environment"] = new Hogan.Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("  <h4>Habitat: Overlap with Biogenic/Community Forming Species<!-- <a href=\"#\" data-toggle-node=\"51f302d508dc4f5f2d00996a\" data-visible=\"false\">show layer</a> --></h4>");_.b("\n" + i);_.b("  <table data-paging=\"10\" data-no-rows=\"Does not overlap any habitats\">");_.b("\n" + i);_.b("    <thead>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <th>Habitat</th>");_.b("\n" + i);_.b("        <th>Overlap (km²)</th>");_.b("\n" + i);_.b("        <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </thead>");_.b("\n" + i);_.b("    <tbody>");_.b("\n" + i);if(_.s(_.f("habitats",c,p,1),c,p,0,459,547,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <tr><td>");_.b(_.v(_.f("HAB_NAME",c,p,0)));_.b("</td><td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td><td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td></tr>");_.b("\n");});c.pop();}_.b("    </tbody>");_.b("\n" + i);_.b("    <tfoot>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <td colspan=\"3\" class=\"paragraph\">");_.b("\n" + i);if(_.s(_.f("pmz",c,p,1),c,p,0,658,981,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("            In Protection Management Zones, representation is often one criteria for siting in a network.  This report calculates the representation of a number of biogenic habitats and community forming species including kelp (various types), eelgrass, sponge reefs and corals within the boundaries of the PMZ.");_.b("\n");});c.pop();}if(_.s(_.f("smz",c,p,1),c,p,0,1008,1363,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("            The potential impact of activities on marine habitats is an important consideration when identifying locations for Special Management Zones.  This report calculates the overlap of the proposed SMZ(s) with a number of biogenic habitats and community forming species including kelp (various types), eelgrass, sponge reefs and corals.");_.b("\n");});c.pop();}_.b("          <p>* = Overlap (%) calculates the proportion of the sub-regional total of the habitat types that fall within the boundary of this zone</p>");_.b("\n" + i);_.b("        </td>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </tfoot>");_.b("\n" + i);_.b("  </table>");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("<div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("  <h4>Habitat: Overlap with Important Areas, IBAs & Critical Habitat</h4>");_.b("\n" + i);if(_.s(_.f("hasImportantAreas",c,p,1),c,p,0,1719,2150,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("    <table>");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th width=\"250px\"><strong>Important Area</strong></th>");_.b("\n" + i);_.b("          <th>Overlap (km²)</th>");_.b("\n" + i);_.b("          <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);if(_.s(_.f("importantAreas",c,p,1),c,p,0,1970,2100,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table>");_.b("\n");});c.pop();}if(_.s(_.f("hasMarineBirds",c,p,1),c,p,0,2194,2642,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("    </br>");_.b("\n" + i);_.b("    <table>");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th width=\"250px\"><strong>Important Bird Areas (IBAs) <strong></th>");_.b("\n" + i);_.b("          <th>Overlap (km²)</th>");_.b("\n" + i);_.b("          <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);if(_.s(_.f("marineBirds",c,p,1),c,p,0,2465,2595,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table>");_.b("\n");});c.pop();}if(_.s(_.f("hasCriticalHabitat",c,p,1),c,p,0,2687,3132,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("    </br>");_.b("\n" + i);_.b("    <table>");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th width=\"250px\"><strong>Critical Habitat</strong></th>");_.b("\n" + i);_.b("          <th>Overlap (km²)</th>");_.b("\n" + i);_.b("          <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);if(_.s(_.f("criticalHabitat",c,p,1),c,p,0,2951,3081,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table>");_.b("\n");});c.pop();}_.b("  <p>");_.b("\n" + i);if(_.s(_.f("pmz",c,p,1),c,p,0,3174,4038,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <p>");_.b("\n" + i);_.b("        To reduce potential conflicts between human uses and marine species, consider these identified important areas for marine mammals, fish and marine birds.  Note that these areas do not include all of the foraging and breeding locations for marine species in the MaPP study area. ");_.b("\n" + i);_.b("      </p>");_.b("\n" + i);_.b("      <p>");_.b("\n" + i);_.b("        Important Areas were identified during the process of establishing Ecologically and Biologically Significant Areas (EBSAs) by the <a href=\"http://pncima.org/site/atlas.html\" target=\"_blank\"> Pacific North Coast Integrated Management Area (PNCIMA)</a>. Important Bird Areas (IBAs) were also identified by Bird Studies Canada and Nature Canada, in partnership with BirdLife International.  Critical Habitat meets Canada's Species at Risk (SARA) requirements. See data layers for more information.  Data sources: up to 2009.");_.b("\n" + i);_.b("      </p>");_.b("\n");});c.pop();}if(_.s(_.f("smz",c,p,1),c,p,0,4059,5027,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <p>");_.b("\n" + i);_.b("        To reduce potential conflicts between human uses and marine species, consider these Important Marine Areas for marine mammals, fish and birds.  These areas do not include all of the foraging and breeding locations for marine species in the MaPP study area. ");_.b("\n" + i);_.b("      </p>");_.b("\n" + i);_.b("      <p>");_.b("\n" + i);_.b("        Important Areas were identified during the process of establishing Ecologically and Biologically Significant Areas (EBSAs) by the <a href=\"http://pncima.org/site/atlas.html\" target=\"_blank\"> Pacific North Coast Integrated Management Area (PNCIMA)</a>. Important Bird Areas (IBAs) were also identified by Bird Studies Canada and Nature Canada, in partnership with BirdLife International.  Critical Habitat meets Canada's Species at Risk (SARA) requirements. Potential critical is insufficient information to meet SARA requirements. See the PNCIMA atlas for more information. See data layers for more information.  Data sources: up to 2009.");_.b("\n" + i);_.b("          </p>");_.b("\n");});c.pop();}_.b("        <p>* = Overlap (%) calculates the proportion of the sub-regional total of the habitat that falls within the boundary of this zone</p>");_.b("\n" + i);_.b("    </p>");_.b("\n" + i);_.b("  <!-- <a href=\"#\" data-toggle-node=\"51f5545c08dc4f5f2d216146\" data-visible=\"false\">show habitats layer</a> -->");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("\n" + i);_.b("<div class=\"reportSection\">");_.b("\n" + i);_.b("  <h4>Marxan Analysis</h4>");_.b("\n" + i);_.b("  <select class=\"chosen\" width=\"400px\">");_.b("\n" + i);if(_.s(_.f("marxanAnalyses",c,p,1),c,p,0,5425,5471,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("    <option value=\"");_.b(_.v(_.d(".",c,p,0)));_.b("\">");_.b(_.v(_.d(".",c,p,0)));_.b("</option>");_.b("\n");});c.pop();}_.b("  </select>");_.b("\n" + i);_.b("  <p class=\"scenarioResults\"></p>");_.b("\n" + i);_.b("  <div class=\"viz\"></div>");_.b("\n" + i);_.b("  <p class=\"scenarioDescription\"></p>");_.b("\n" + i);_.b("  <p>");_.b("\n" + i);_.b("    MaPP collaborated with the <a href=\"http://bcmca.ca/\" target=\"_blank\">BC Marine Conservation Analysis (BCMCA)</a> to use Marxan to identify marine areas of high conservation value based on spatial datasets of ecological information (features). These Marxan scenarios can be used to inform the location or siting of PMZs. <a href=\"http://www.uq.edu.au/marxan/\" target=\"_blank\">Marxan</a> is a decision support tool developed by the University of Queensland to provide solutions which capture a specified amount (target) of individual features for the least cost. The cost layer used for these Marxan runs was solely based on area. Based on relatively simple mathematical algorithms and equations, Marxan searches millions of potential solutions to find the best balance between costs and benefits. These MaPP Marxan solutions minimize the overall area subject to the constraint of meeting specified “targets” for all ecological features.");_.b("\n" + i);_.b("  <p>");_.b("\n" + i);_.b("  <p>");_.b("\n" + i);_.b("    MaPP consulted the MaPP Science Advisory Committee (SAC) for advice on scenarios and target selection. The SAC supported the decision to use the percentage target categories established by the BCMCA project team in 2006. Please see this <a href=\"https://dl.dropboxusercontent.com/u/1764986/BCMCA-Marxan for MaPP-Report on initial scenarios_27Feb2013.pdf\" target=\"_blank\">2013 BCMCA report</a> for more information about the MaPP-BCMCA project and Marxan scenarios, and consult the <a href=\"http://bcmca.ca\" target=\"_blank\">BCMCA Atlas</a> for detailed information about targets, species, and habitats.");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("<div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("  <h4>Adjacent Breeding Sites for Birds and Mammals</h4>");_.b("\n" + i);_.b("  <table  data-paging=\"10\" data-no-rows=\"Is not adjacent to breeding sites for birds and mammals\">");_.b("\n" + i);_.b("    <thead>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <th>Species</th>");_.b("\n" + i);_.b("        <th>Number of Breeding Areas or Nesting Sites</th>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </thead>");_.b("\n" + i);_.b("    <tbody>");_.b("\n" + i);if(_.s(_.f("nonFishBreedingAreas",c,p,1),c,p,0,7554,7640,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <tr>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("SPECIES",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        <td>");_.b(_.v(_.f("COUNT",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("      </tr>");_.b("\n");});c.pop();}_.b("    </tbody>");_.b("\n" + i);_.b("    <tfoot>");_.b("\n" + i);_.b("      <tr>");_.b("\n" + i);_.b("        <td colspan=\"2\" class=\"paragraph\">");_.b("\n" + i);_.b("          <p>");_.b("\n" + i);_.b("            When selecting sites, consider proximity to breeding areas or nesting sites for birds and mammals in effort to minimize disturbance and protect adjacent foraging area. ");_.b("\n" + i);_.b("          </p>");_.b("\n" + i);_.b("        </td>");_.b("\n" + i);_.b("      </tr>");_.b("\n" + i);_.b("    </tfoot>");_.b("\n" + i);_.b("  </table>");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("<div class=\"reportSection tableContainer\">");_.b("\n" + i);_.b("  <h4>Habitat: Overlap with Marine Classifications and Oceanographic Regions</h4>");_.b("\n" + i);if(_.s(_.f("hasMarineEcosections",c,p,1),c,p,0,8164,8681,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("    <table  data-paging=\"10\" data-no-rows=\"Does not overlap any Marine Ecosections\">");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th width=\"250px\"><strong>Marine Ecosection</strong></th>");_.b("\n" + i);_.b("          <th>Overlap (km²)</th>");_.b("\n" + i);_.b("          <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);if(_.s(_.f("marineEcosections",c,p,1),c,p,0,8494,8628,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("HAB_NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table>");_.b("\n");});c.pop();}if(_.s(_.f("hasHighTideAreas",c,p,1),c,p,0,8730,9235,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("    </br>");_.b("\n" + i);_.b("    <table  data-no-rows=\"Does not overlap any High Tide Areas\">");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th width=\"250px\"><strong>High Tidal Current Area</strong></th>");_.b("\n" + i);_.b("          <th>Overlap (km²)</th>");_.b("\n" + i);_.b("          <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);if(_.s(_.f("highTideAreas",c,p,1),c,p,0,9052,9186,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("HAB_NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table>");_.b("\n");});c.pop();}if(_.s(_.f("hasOceanographicRegions",c,p,1),c,p,0,9287,9825,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("    </br>");_.b("\n" + i);_.b("    <table  data-paging=\"10\" data-no-rows=\"Does not overlap any Oceanographic Regions\">");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th width=\"250px\"><strong>Oceanographic Region</strong></th>");_.b("\n" + i);_.b("          <th>Overlap (km²)</th>");_.b("\n" + i);_.b("          <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);if(_.s(_.f("oceanographicRegions",c,p,1),c,p,0,9636,9770,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("HAB_NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table");_.b("\n");});c.pop();}if(_.s(_.f("hasBenthicClasses",c,p,1),c,p,0,9878,10392,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("    </br>");_.b("\n" + i);_.b("    <table  data-paging=\"10\" data-no-rows=\"Does not overlap any Benthic Classes\">");_.b("\n" + i);_.b("      <thead>");_.b("\n" + i);_.b("        <tr>");_.b("\n" + i);_.b("          <th width=\"250px\"><strong>Benthic Class</strong></th>");_.b("\n" + i);_.b("          <th>Overlap (km²)</th>");_.b("\n" + i);_.b("          <th>Overlap (%)<sup>*</sup></th>");_.b("\n" + i);_.b("        </tr>");_.b("\n" + i);_.b("      </thead>");_.b("\n" + i);_.b("      <tbody>");_.b("\n" + i);if(_.s(_.f("benthicClasses",c,p,1),c,p,0,10208,10342,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("        <tr>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("HAB_NAME",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("CLPD_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("          <td>");_.b(_.v(_.f("PERC_AREA",c,p,0)));_.b("</td>");_.b("\n" + i);_.b("        </tr>");_.b("\n");});c.pop();}_.b("      </tbody>");_.b("\n" + i);_.b("    </table>");_.b("\n");});c.pop();}_.b("  <p>");_.b("\n" + i);if(_.s(_.f("pmz",c,p,1),c,p,0,10433,10694,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <p>");_.b("\n" + i);_.b("        In Protection Management Zones, representation of habitat types is often one criteria for siting in a network.  Data in this report includes Ecosections, oceanographic regions, benthic classes and areas of high tidal current. ");_.b("\n" + i);_.b("      </p>");_.b("\n");});c.pop();}if(_.s(_.f("smz",c,p,1),c,p,0,10715,11048,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("      <p>");_.b("\n" + i);_.b("        The potential impact of activities on marine habitats is an important consideration when identifying locations for Special Management Zones.  ");_.b("\n" + i);_.b("        This report calculates the overlap of the proposed SMZ(s) with Ecosections, oceanographic regions, benthic classes and areas of high tidal current.");_.b("\n" + i);_.b("      </p>");_.b("\n");});c.pop();}_.b("    <p>* = Overlap (%) calculates the proportion of the sub-regional total of the classification/region type that fall within the boundary of this zone</p>");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("</div>");_.b("\n");return _.fl();;});
this["Templates"]["overview"] = new Hogan.Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"reportSection\">");_.b("\n" + i);_.b("  <h4>Size</h4>");_.b("\n" + i);_.b("  <p class=\"large\">");_.b("\n" + i);_.b("    This zone is <strong>");_.b(_.v(_.f("size",c,p,0)));_.b(" square kilometers</strong>, which represents <strong>");_.b(_.v(_.f("percent",c,p,0)));_.b("%</strong> of the ");_.b(_.v(_.f("sc_name",c,p,0)));_.b(". Size is used to quantify draft spatial zones and provide percent coverage. ");_.b("\n" + i);_.b("  </p>");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("\n" + i);_.b("\n" + i);if(_.s(_.f("anyAttributes",c,p,1),c,p,0,303,429,"{{ }}")){_.rs(c,p,function(c,p,_){_.b("<div class=\"reportSection\">");_.b("\n" + i);_.b("  <h4>");_.b(_.v(_.d("sketchClass.name",c,p,0)));_.b(" Attributes</h4>");_.b("\n" + i);_.b(_.rp("attributes/attributesTable",c,p,"    "));_.b("  </table>");_.b("\n" + i);_.b("</div>");_.b("\n");});c.pop();}return _.fl();;});

if(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
  module.exports = this["Templates"];
}
},{}]},{},[15])
//# sourceMappingURL=data:application/json;base64,
